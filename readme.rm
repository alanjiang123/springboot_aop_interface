############## 测试 aop的常用方法，与自定义注解的开发 ，（本项目仅为个人学习demo，如有人看出哪有问题，欢迎的您的意见）#####################
############## https://segmentfault.com/a/1190000007469968 ###########################




    一、aop
        AOP核心概念
        1、横切关注点
            对哪些方法进行拦截，拦截后怎么处理，这些关注点称之为横切关注点
        2、切面（aspect）
            类是对物体特征的抽象，切面就是对横切关注点的抽象
        3、连接点（joinpoint）
            被拦截到的点，因为Spring只支持方法类型的连接点，所以在Spring中连接点指的就是被拦截到的方法，实际上连接点还可以是字段或者构造器
        4、切入点（pointcut）
            对连接点进行拦截的定义
        5、通知（advice）
            所谓通知指的就是指拦截到连接点之后要执行的代码，通知分为前置、后置、异常、最终、环绕通知五类
        6、目标对象
            代理的目标对象
        7、织入（weave）
            将切面应用到目标对象并导致代理对象创建的过程
        8、引入（introduction）
            在不修改代码的前提下，引入可以在运行期为类动态地添加一些方法或字段

        （一）、总共有3种切入，前置，后置，环绕
            1.前置：在方法之前执行，无法控制方法是否执行
            2.后置：在方法之后执行，无法修改方法返回的参数
            3.环绕：可以控制方法是否执行，并可以完全修改返回值甚至返回不同类型的值

            ++：织入(Weaving)
            将 aspect 和其他对象连接起来, 并创建 adviced object 的过程.
            根据不同的实现技术, AOP织入有三种方式:
            编译器织入, 这要求有特殊的Java编译器.
            类装载期织入, 这需要有特殊的类装载器.
            动态代理织入, 在运行期为目标类添加增强(Advice)生成子类的方式.
            Spring 采用动态代理织入, 而AspectJ采用编译器织入和类装载期织入.
            ++：advice 的类型
            before advice, 在 join point 前被执行的 advice. 虽然 before advice 是在 join point 前被执行, 但是它并不能够阻止 join point 的执行, 除非发生了异常(即我们在 before advice 代码中, 不能人为地决定是否继续执行 join point 中的代码)
            after return advice, 在一个 join point 正常返回后执行的 advice
            after throwing advice, 当一个 join point 抛出异常后执行的 advice
            after(final) advice, 无论一个 join point 是正常退出还是发生了异常, 都会被执行的 advice.
            around advice, 在 join point 前和 joint point 退出后都执行的 advice. 这个是最常用的 advice.


            名称解释：
                join point:所有方法的执行点
                point cut:一个描述信息



        (二)、aop的话，个人理解就是2种，一种就是写指定路径包的哪些方法，根据设置表达式来，
            1.execution()   //写包的路径描述
            2.@within()     //拦截含有某个注解的类中所有方法
            3.@annotation() //拦截含有这个注解的方法

    二、自定义注解
        java提供了4种注解，专门负责新注解的创建：
        1.@Traget
            表示该注解可以用于什么地方，可能的ElementType参数有：
            CONSTRUCTOR：构造器的声明
            FIELD：域声明（包括enum实例）
            LOCAL_VARIABLE：局部变量声明
            METHOD：方法声明
            PACKAGE：包声明
            PARAMETER：参数声明
            TYPE：类、接口（包括注解类型）或enum声明
        2.Retention
            表示需要在什么级别保存该注解信息。可选的RetentionPolicy参数包括：
            SOURCE：注解将被编译器丢弃
            CLASS：注解在class文件中可用，但会被VM丢弃
            RUNTIME：VM将在运行期间保留注解，因此可以通过反射机制读取注解的信息
        3.Document
            将注解包含在Javadoc中
        4.Inherited
            允许子类继承父类中的注解


        （二）、
            自定义注解的获取很简答，但是我们怎么样去获取类的，曾经公司的项目是扫描整个包，然后每个类都扫描一下，获取到每个里面的注解，
            这一块后面再进行加深，做到就像spring的注解一样的概念我觉得就可以了，应该我们公司的虽然也可以，但是稍微觉得有些地方不妥。




